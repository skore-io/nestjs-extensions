name: On push main

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    name: Build and publish to Github Packages

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read .nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT
        id: nvm

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'

      - name: Application cache
        uses: actions/cache@v4
        with:
          path: |
            ./node_modules
            ./dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Dependencies
        run: npm i

      - name: Build project
        run: npm run build

      - name: Generate release
        run: |
          echo "Generating release..."

          # Run lerna version and capture the output
          output=$(npm run version:changes)
          echo "Output of Lerna Version:"
          echo "$output"

          # Extract first package change using grep and awk
          read packageName oldVersion newVersion < <(echo "$output" | grep ' - ' | awk -F ': ' '{
            split($1, packageInfo, " - ");
            split($2, versionInfo, " => ");
            print packageInfo[2], versionInfo[1], versionInfo[2];
            exit; # Exit after the first line processed
          }')

          echo "Package: $packageName, Old Version: $oldVersion, New Version: $newVersion"

          # Check if any package has been modified and set the commit message
          if [ -z "$packageName" ]; then
            commitMessage="chore(release): new release published"
          else
            commitMessage="chore($packageName): $newVersion"
          fi

          echo "Commit Message: $commitMessage"

          # Remove changes created by the previous command
          git checkout .

          # Execute the npm version script with the dynamic commit message
          echo "Generating commit with new version"
          npm run version:generate --message="$commitMessage"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish release
        run: git update-index --assume-unchanged package-lock.json && lerna publish from-git --yes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
